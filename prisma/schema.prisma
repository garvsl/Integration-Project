// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?

  gAuthCredentials      GAuthCredentials?
  mondayAuthCredentials MondayAuthCredentials?

  filesHaveAccessTo File[]
  commentsAuthored  CommentAuthor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GAuthCredentials {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  googleId     String
  accessToken  String
  refreshToken String
  scope        String
  tokenType    String
  expiryDate   BigInt

  webhookChannelId         String?
  webhookChannelExpiration DateTime?
  webhookResourceId        String?
  changesPageToken         String?

  handle String?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt
}

model MondayAuthCredentials {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  accessToken  String
  scope        String
  tokenType    String
  // No expiration date, and no refresh.

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt
}

model File {
  id                 Int    @id @default(autoincrement())
  usersWhoHaveAccess User[]

  name     String
  platform String?

  googleDriveFile GoogleDriveFile?
  comments        Comment[]        @relation("file")

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt

  createdAt DateTime?
  updatedAt DateTime?
}

model GoogleDriveFile {
  id     Int  @id @default(autoincrement())
  file   File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int  @unique

  googleId String?
  name     String?
  mimeType String?

  createdAt DateTime?
  updatedAt DateTime?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt

  @@index([googleId])
}

model Comment {
  // Sets default to cuid but gets overwritten by the id from middleware
  id     String @id @default(cuid())
  file   File?   @relation("file", fields: [fileId], references: [id], onDelete: Cascade)
  fileId Int?

  author   CommentAuthor @relation(fields: [authorId], references: [id])
  authorId Int

  platform             String?
  // Might not have this until later...
  platformId           String?
  platformDiscussionId String?

  content String

  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  done   Boolean   @default(false)
  doneAt DateTime?

  createdAt DateTime?
  updatedAt DateTime?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt

  @@index([platformId])
  @@index([platformDiscussionId])
  @@index([createdAt])
}

model CommentAuthor {
  id       Int       @id @default(autoincrement())
  comments Comment[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  platformId    String?
  platformName  String?
  platformEmail String?

  dbCreatedAt DateTime @default(now())
  dbUpdatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}
